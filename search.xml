<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>详解可迭代对象和迭代器</title>
      <link href="2020/11/08/xiang-jie-ke-die-dai-dui-xiang-he-die-dai-qi/"/>
      <url>2020/11/08/xiang-jie-ke-die-dai-dui-xiang-he-die-dai-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="可迭代对象和迭代器"><a href="#可迭代对象和迭代器" class="headerlink" title="可迭代对象和迭代器"></a>可迭代对象和迭代器</h1><h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>可迭代对象和迭代器是经常碰到但又很容易混淆的两个概念，所以今天小编跟大家深入剖析一下可迭代对象和迭代器的区别。认真看完本文，你将收获：</p><ul><li>理解什么是可迭代对象</li><li>理解检查可迭代对象的方法　</li><li>理解什么是迭代器</li><li>可迭代对象和迭代器的关系</li></ul><p>事不宜迟，我们马上开始吧！</p><h2 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h2><p>要理解可迭代对象，那首先要搞清楚迭代的概念。关于迭代，维基百科是这样子定义的：</p><blockquote><p><strong>迭代</strong>是重复反馈过程的活动，其目的通常是为了接近并到达所需的目标或结果。每一次对过程的重复被称为一次“迭代”，而每一次迭代得到的结果会被用来作为下一次迭代的初始值。</p></blockquote><p>从这个定义中，我们大概可以知道迭代是对某一个过程的重复。其实在程序中，迭代也是类似的，它是一种遍历集合元素的方式，请看下面的示例1。</p><pre><code class="python"># 示例1for i in [1,2,3]:    print(i)</code></pre><p>输出结果：</p><pre><code class="python">123</code></pre><p>在示例1中，解释器重复地从列表中取出元素并打印，直到遍历结束为止，这就是一个迭代的过程。可见，可迭代对象可以在for循环中遍历元素。</p><p>那什么样的对象才是一个可迭代对象？<strong>事实上，只要实现 __ iter __ 方法或者实现 __ getitem __方法而且其参数从0开始索引，那么该对象就是可迭代对象</strong>，请看示例2。</p><pre><code class="python">#示例2class Vector(object):    def __init__(self,components):        self.components = list(components)    def __iter__(self):        return iter(self.components)V1 = Vector([1,2,3])for i in V1:    print(i)</code></pre><p>输出结果：</p><pre><code class="python">123</code></pre><p>从示例2中可见，Vector类实现了 __ iter __方法，解释器可以从Vector类对象中重复地取出元素并打印。如果要检查某一个对象是否为可迭代对象，其实可以使用isinstance( )函数，该函数用于判断对象是否为某一类型，但是用这个函数判断不一定准确(原因后面会说到)。</p><pre><code class="python">from collections.abc import Iterableprint(isinstance(V1,Iterable))#True</code></pre><p>如果我们只是实现了 __ getitem __ ()方法，情况又会怎么样呢？请看示例3。</p><pre><code class="python"># 示例3from collections.abc import Iterableclass Vector(object):    def __init__(self,components):        self.components = list(components)    def __getitem__(self,index):        return self.components[index]V1 = Vector([1,2,3])for i in V1:    print(i)print(isinstance(V1,Iterable))</code></pre><p>输出结果：</p><pre><code class="python">123Flase</code></pre><p>从示例3中可看到，Vector实现了 __ getitem __ 方法，解释器可以对V1进行迭代并打印元素，但是！使用isinstance()判断时，返回的结果居然是False。明明可以使用for循环来迭代元素，为什么是判断是Flase呢？事实上，如果可迭代对象只是实现了 __ getitem __ 的话，abc.Iterable是不考虑该方法的，这便导致了isinstance()判断不准确。<strong>更准确的方法应该是调用iter()函数</strong>，如果该对象不可迭代，就会抛出TypeError的错误。我们尝试使用iter()来判断一下。</p><pre><code class="python"># 示例4print(iter(V1))#&lt;iterator object at 0x000001B262E35518&gt;#去掉__getitem__方法后print(iter(V1))#TypeError: &#39;Vector&#39; object is not iterable</code></pre><p>从示例4中可以看到，对于可迭代对象，iter()会返回&lt; iterator object at xxxx &gt;。当去掉 __ getitem __ ()方法后再检查时，便抛出TypeError错误。iter()函数用于生成一个迭代器，也就是说<strong>可以返回一个迭代器的就是一个可迭代对象。</strong></p><p>该对象之所以能迭代，是因为实现了__ iter __ ()方法。当使用for循环时候，解释器会检查对象是否有__ iter __ ()方法，有的话就是调用它来获取一个迭代器。所以没有 __ iter __ ()方法但实现了__ getitem __ ()，解释器会创建一个迭代器，尝试从0开始按顺序遍历元素。如果尝试失败，Python便会抛出TypeError错误。</p><p>那么Python内置类型中究竟有哪些可迭代对象呢？我们一起盘点一下吧。</p><ul><li>list</li><li>dict</li><li>tuple</li><li>set</li><li>string</li></ul><p>其实盘点出来的都是序列，所以说<strong>任何序列都是可迭代的对象，</strong> 其原因在于他们至少都会实现__ getittem __ 方法（序列都可以通过索引获取元素）。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>在介绍可迭代对象时候说到，当使用for循环时候，解释器会检查对象是否有__ iter __ ()方法，有的话就是调用它来获取一个迭代器。那么究竟什么是迭代器呢？</p><p>其实迭代器是实现了<strong>__ iter __ 方法和 __ next __ 方法的对象</strong>。__ iter __ 方法用于返回迭代器本身，而 __ next __ 用于返回下一个元素。我们自定义一个迭代器，以斐波那契数列为例说明一下其内部的执行情况，看示例5。</p><pre><code class="python"># 示例5import itertoolsclass Fib:    def __init__(self):        self.pre = 0        self.cur = 1    def __iter__(self):        return self    def __next__(self):        p = self.cur        self.cur += self.pre        self.pre = p        return pf = Fib()a = list(itertools.islice(f,0,10))print(a)#[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</code></pre><p>从示例5中__ iter __ ()返回了迭代器对象本身，以便在使用可迭代对象的地方(如for循环中)使用迭代器，而 __ next __ ()则通过计算返回下一个元素。我们再一起看看下面的示例6。</p><pre><code class="python">#示例6&gt;&gt;&gt;s = &#39;ABCD&#39;&gt;&gt;&gt;it = iter(s)&gt;&gt;&gt;while True:print(next(it))ABCD---------------------------------------------------------------------------StopIteration                             Traceback (most recent call last)&lt;ipython-input-4-d09d5cde4495&gt; in &lt;module&gt;()----&gt; 1 while True:print(next(it))StopIteration:&gt;&gt;&gt; list(it)[]&gt;&gt;&gt;list(iter(s))[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;]</code></pre><p>在示例6中先定义一个字符串的可迭代对象，通过iter()函数返回一个迭代器(会自动调用对象的__ iter __ 方法)，然后在循环中通过next()取值并打印(会自动调用对象 __ next __ ()方法)，通过next()方法一个个地遍历可迭代对象中的元素，当遍历结束，便会抛出<strong>StopIteratioin异常</strong>，这时迭代器也没用了，如果要再次迭代，就要使用iter()函数重新构建迭代器。</p><p>通过示例5和示例6，我们可知道<strong>迭代器是一个可以记住遍历位置的对象，其内部有一个状态用于记录迭代所在的位置，以便下次迭代时候能取出正确的元素</strong>。迭代器就像一个懒人一样，当你需要数据时候才会返回给你，否则就在等待下一次的调用。</p><p>如果要检查某个对象是否为迭代器，最好的方式是使用isinstance( )函数，见示例7。</p><pre><code class="python"># 示例7from collections.abc import Iterator f = Fib()print(isinstance(f,Iterator)) #True</code></pre><p>好了，说了那么多，究竟迭代器哪些用处呢？其实在Python语言内部，迭代器用于支持：</p><ul><li>for 循环</li><li>构建和扩展集合类型</li><li>逐行遍历文本文件</li><li>列表推导、字典推导和集合推导</li><li>元组拆包</li><li>调用函数时，使用*拆包</li></ul><h2 id="可迭代对象和迭代器的关系"><a href="#可迭代对象和迭代器的关系" class="headerlink" title="可迭代对象和迭代器的关系"></a>可迭代对象和迭代器的关系</h2><ul><li><p>可迭代对象不一定是迭代器，迭代器一定是可迭代对象。因为迭代器一定会实现 __ iter __ 方法，而可迭代对象尽管实现了 __ iter __ 也不一定实现 __ next __方法。</p></li><li><p>Python 从可迭代对象中获取迭代器，根据示例6的例子，我们知道先是使用iter()函数在迭代对象中获取迭代器，然后使用next()来获取下一个元素，关系如下图所示。</p><p><img src="https://gitee.com/weifagan/MyPic/raw/master/img/iter.png"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>可迭代对象实现了 __ iter __ 方法或者实现 __ getitem __方法而且其参数从0开始索引。</li><li>使用iter()函数判断可迭代对象更准确</li><li>任何序列都是可迭代对象</li><li>迭代器对象实现了 __ iter __ 和 __ next __方法。</li><li>迭代器是一个可以记住遍历位置的对象，其内部有一个状态用于记录迭代所在的位置，以便下次迭代时候能取出正确的元素</li><li>检查对象是否为迭代器最好的方式是调用isinstance()方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可迭代对象、迭代器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
